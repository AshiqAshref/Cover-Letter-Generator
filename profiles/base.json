{
    "personal_context": "''''!!!PERSONAL PROFILE!!!'''\n1\nname: ASHIQ A\nEmbedded Systems Engineer | Architecting Reliable & Autonomous IoT Solutions | full-stack engineer | data/database/network engineer\nemail : ashiq.professional@gmail.com \nPhone: +61406855061 \nEDUCATION: Bachelors in computer science\n\tLa Trobe University, 2024\n\tFocus: Embedded Systems, IoT, Robotics, Real-Time Systems, Advanced C++, Network Engineering.\n\tAward: Engineering and IT Showcase 2022 Award \u2013 For innovation in IoT and Robotics.\n\tCertification: CCNA \u2013 Cisco Certified Network Associate.\nAdditional Information\nOpen-source Contributor: Actively participate in forums and contribute to open-source projects, sharing knowledge on IoT systems, electronics, and programming.\nTechnical Skills\n\tLanguages: C++ (Expert, Embedded C++, Performance Optimization), Java (Java 22, Spring Boot, Servlets), Python, JavaScript, TypeScript\n\tFull stack Development: Angular(V14, V17, V19), Spring Boot, Java Servlets, SQL, MongoDB, SCSS, Bootstrap, tomcat, JavaFX\n\tDatabase: SQL, MongoDB\n\tEmbedded Systems: Custom RTOS Implementations, FreeRTOS, Arduino Core, Hardware Debugging.\n\tMicroprocessors: AVR, ARM Cortex M3, RISC-V, Xtensa LX6.\n\tNetwork Engineering: CCNA, CISCO IOS\n\tMachine learning: Python, PyTorch.\n\tElectronics: Circuit Maker, Fritzing, Wokwi, Logisim\n\tSystems Engineering: Agile, Enterprise Architect\n\tSpecial Skills: Memory Management, Timing/Scheduling in Single/Multicore Processors, custom reliable fast communication protocols. Custom kernel implementation if necessary.\n\n\nCore Competencies\nENGINEERING EXCELLENCE | BUILT-IN RELIABILITY\nUncompromising Reliability: Expert in designing fault-tolerant embedded systems with multiple redundancies, error correction, and fail-safe mechanisms as core design principles.\nAutonomous Problem Solver: Proven ability to independently manage projects from concept to deployment, minimizing oversight and maximizing efficiency.\nResource Optimization: Deeply skilled in C++ code optimization, memory management, and hardware selection for high performance in resource-constrained environments.\nEnd-to-End System Design: Full stack understanding from embedded firmware (Arduino, ESP32, Custom RTOS) to backend (Spring Boot, Java Servlets) and frontend (Angular).\nCustom Communication Protocols: Expertise in designing and implementing reliable protocols with error correction, collision detection, and retry logic for robust data integrity.\n\nEXPERIENCE:\nMedication Management System\nhttps://github.com/AshiqAshref/Heletron\n PRODUCTION-READY | RELIABILITY\nThis isn't just a project; it's a fully functional, fault-tolerant IoT system demonstrating my commitment to building reliable and autonomous solutions for real-world challenges.\nChallenge: Develop a medication dispensing system that is remotely controllable, user-friendly and unfailingly reliable, even in challenging environments.\nSolution: A comprehensive, full-stack IoT architecture integrating Arduino, ESP32, Spring Boot, Java Servlets, SQL, and Angular, engineered for robustness and autonomous operation.\nKey Achievements: Quantifiable Reliability & Independence, Custom RTOS type kernel from scratch:\n\u2022\tFault-Tolerant Arduino Driver (C++): Achieved near-zero downtime in stress tests through custom memory management, interrupt-driven architecture, and a robust error handling framework. Independent RTC module ensures continuous timekeeping.\n\u2022\tUltra-Reliable Communication Protocol: Reduced data loss to near-zero with a custom multi-layered protocol incorporating error correction, collision detection, timeouts, and intelligent retries. All running on custom built RTOS type kernel\n\u2022\tSelf-Managing ESP32 Server (C++): Enabled continuous online/offline operation with local SD card data storage. \"Set-and-forget\" functionality minimizes user intervention. Integrated OLED display for rapid diagnostics.\n\u2022\tScalable & Robust Backend (Spring Boot & Java Servlets): Optimized SQL database and RESTful APIs for high-availability data management (medication schedules, user profiles, custom system logs).\n\u2022\tIntuitive Angular Frontend: Empowered users with remote device control, medication schedule management, and real-time system monitoring.\n\u2022\tIntegrated peripherals: 16 RGB LEDs (MAX7219), 16 Lever Switches (SN74S151), custom LCD menu, and a 3-axis stepper motor system (DRV8825, A4988).\nCore Technologies: Arduino, ESP32, C++, Custom RTOS Principles, Spring Boot (Java 22), Java Servlets, REST APIs, SQL, Angular, Custom Communication Protocols, Stepper Motor Control, Multi-Sensor Integration, Custom Power Supply Design.\n\n\nFreelance Engineering & Independent Projects\n2020 \u2013 Present\nBrick Cleaning Machine (Automation): Increased efficiency by 23.6% compared to manual methods. Utilized second-hand materials and adapted designs on-the-fly.\nDigital Circuit Design & Processor Architecture (Logisim): Designed and simulated basic processors and timing protocols.\n*Arduino Memory Mapper: A custom-built library to map all dynamic segments of a memory in AVR and RISC-V architecture.\n \n* https://github.com/AshiqAshref/Arduino_Memory_Viewer\n\nTutor Volunteer | La Trobe University\nOctober 2020 \u2013 November 2023\nImproved student understanding and performance in technical subjects (Database Design, Network Engineering, Java) through effective teaching and personalized support.\n\nabout my project:\nok, so ive heard that \"patients\"in aged care gets abused. They also forget to take their medications on time. Sometimes they are given unauthorised pills by the \"aged care workers\" to remove unwanted behaviours and many more issues. So i made this device called \"heletron\" that you can assign to a \"patient\" which will enable you to add as many \"robots\" as the \"patient\" needs. This allows it to be tailorable to a specific \"patient's\" needs. To give an example \"heletron\" is like a mobile phone and the \"robots\" are like apps where you can install and uninstall \"robots\" as you need. \"Robots\" can also interact with each other by sharing data trough \"heletron\".\n\n For \"heletron\", the first \"robot\" i created is called the \"Pill Dispenser\". \"Pill Dispenser\" is capable of dispensing medications to \"patients\" automatically when it gets a \"trigger\". These \"triggers\" can be anything: \"specific time\", \"external stimuli from one of the sensors like light sensor so the patient can take his medication when he wakes up and turns on the light\", \"external stimuli from one of the robots like his smartwatch bio monitor to dispense medicine when his sugar drops or pressure irregularities\" etc.\n\n Now lets talk how it works. Each medicine is stored in an array of locked boxes. when a \"trigger\" is received, the \"Pill dispenser\" checks which boxes should be pushed out for that \"trigger\". Then using an arm controlled by 3 stepper motors, it unlocks the box and pushes the medicine out. Each box is equipped with an \"interaction sensor\" that checks to see if the unlocked box have been interacted with or not:- indicating whether the \"patient\" took the medication or not. Each boxes are also equipped with \"RGB LED indicators\" indicating the boxes status which are \"taken\", \"Missed\" and \"Upcoming medication\". \n\n Now lets talk relation. At a point 1 \"heletron\" will belong to 1 \"patient\" only and vice versa. 1 \"heletron\" can have multiple \"robots\" like our \"pill dispenser\" connected to it .however 1 \"robot\" can belong to only one \"heletron\". \"Main server\" can have many \"heletrons\" under it. however 1 \"heletron\" can connect to only 1 \"Main Server\".\n\n \"Users\" can interact with any and all \"heletrons\" connected to \"Main Server\" and its robots using the \"Dashboard Webapp\". Using this \"Dashboard Webapp\" they can see all operational data reported back by the robots stored in a \"heletron\". The \"pill dispenser\" sends \"operational data\" to the \"heletron\" where it is stored. \"Operational data\" of the \"Pill dispenser\" contains information about all the pills the \"patient\" took including name of the medicine, time, trigger, and if the \"patient\" took the medication or missed it. It also tells how many pills are remaining and alerts \"users\" if a pill is about to finish. \"humans\" can also manage pills like adding, deleting or updating but only authorised \"users\" like doctors and not unauthorised ones like nurses or aged care workers are allowed to make changes. You can also assign \"triggers\" from other \"robots\" or \"sensors\" to a box in the pill dispenser the \"Dashboard Webapp\". like wise u can control the functions of all robots connected to a \"Heletron\".\n\n Now lets talk what each system has. \"Main Server\"(running apache tomcat using java servlet, java) is responsible for communication between \"heletrons\", \"Dashboard Webapp\"(using angular and node.js, written using typescript, javascript, jquery, html, css) and \"Server database\"(MySQL Server). The \"server database\" have all information about all devices and robots connected to \"Main server\".\n\n Each \"Heletron\"(made with node MCU) has its own \"Embedded Database\"(SD card module, C++) carrying \"operational data\" about all robots connected to it. \"heletron\" talks to \"Main server\" wirelessly trough WIFI(ESP8226). It also has a \"setup website\"(HTML, CSS, Javascript, C++) which is useful for setting up \"heletron\" for the first time or trouble shooting \"heletron\". It automatically shows the \"setup website\" if the device cant connect to the WIFI or the \"Main server\". With the \"setup website\" you can provide your WIFI details and Ip address of \"Main server\". \"heletron\" also have a custom 5 button \"lcd display\" with a built in menu that shows \"operational data\", allows u to view and setup Ip address, do calibration for the \"robots\", do basic error checks and configure basic functions.\n\n The \"pill dispenser\" is running on an Arduino mega. It is connected to the \"interaction sensor\"(Using de-multiplexer circuit) and the  \"RGB LED indicators\"(using M54564FP darlington array and DM163 controller) in each box. It also interacts with 3 stepper motors(neema 17 using A4988 Driver) responsible for controlling the arm which unlocks and pushes the box out when a \"trigger\" is received. It is also connected to homing switches which are used to calibrate the positions of the steppers motors. Each individual component is powered by a power supply unit i designed.\n\nbut got into a bit more depth on my tecnical expertice to make it more attractive to potential hirers. focus more on the stuff ive done in the embedded systems, like how reliable it is, corrects errors it self, basically takes care of it self, have redundancies on redundancies, can work if a lot of the many compnents goes down etc all while being extremly memmory effitient and fast with reliable cusom communication algorithm with error correction, collition detection, timeout, retry on fail etc. an about my indepth library, archetecture, device understanding,my indepth understanding of the c++ language and exploiting it while understanding its limitations and bypassing it. let me also explain a bit about the electronics so uou understand a bit more. in the arduino driver side there is:   2 max7219 ics controlling 16 RGB leds to show the status of each box,  there is 2 SN74S151 multiplexors connected to 16 lever switches that senses if a box has been taken out or not, and  lcd menu using i2c, 5 extra buttons for the cusom menu ive created implemented in the lcd_menu class in arduino driver where you can set daylight saving, re calibrate motors, activate access point in the esp controller, see the server status and set ips for servers , and many more. it also connected to a stepper motor driver module ive created which have a drv8825 controlling the Y axis lead screw using the nema17 stepper, and 2 A4988 stepper controllers controlling x axis drive belt and z axis lead screw giving 3d movement. each axis also have homing sensors or limit switches. as we mentioned before, each box have their own rgb led and sensor. it also have its own locking mechanism which automatically locks when pushed in. when a medicine needs to be dispensed, the stepper motor unlocks the box and pushes it out. also note the cusom library implementation to reduce the size of the data json for the arduino driver, and the esp32s ability to work both online and offline like set and forget. the arduino driver is also connected to esp32 for direcxt communication.Arduino driver is also connected to an rtc module so it can keep time independantly without the need for esp32. which mean each module is self suffitient. now in esp32, it is connected to a custom made sd card module with an sd card to store data, a oled display for debugging only and not offitial production. and all that is powered by a custom power supply designed and build by me. also talk about the custom logging algorith and the complex database and data engineering and management show cased in the spring boot backend. \n\n**Role:** Lead Developer, System Architect  \n- Designed and implemented a comprehensive IoT system for remote medication dispensing, integrating **Arduino-based driver**, **ESP32 server**, **Spring Boot/Java Servlet backends**, **SQL database**, and **Angular frontend**.  \n- **Key Achievements:**  \n\n- **Programming Languages:** C++, Java (including Java 22), Python, JavaScript, TypeScript  \n- **Embedded Systems:** Arduino, ESP32, FreeRTOS, ARM Cortex M3, RISC-V, Xtensa LX6, custom memory management, motor control, sensor integration  \n- **Full-Stack Development:** Angular, Spring Boot, Java Servlets, REST APIs, SQL, MongoDB, SCSS, Bootstrap  \n- **Communication Protocols:** UART, SPI, I2C, TCP/IP, LoRa, Wi-Fi, Bluetooth, custom protocols with error correction and collision detection  \n- **Hardware Design:** Circuit design, PCB layout (Circuit Maker, SPICE, Fritzing), power supply design, stepper motor control, sensor integration  \n- **Database Management:** SQL (MySQL, PostgreSQL), database design, data optimization  \n- **Tools & Frameworks:** Git, Logisim, Wokwi, ESP_IDF, MicroPython, Arduino Core, PyTorch, Pandas, NumPy  \n- **Specialized Skills:** Real-time systems, timing/scheduling protocols, memory optimization, fault-tolerant systems, robotics, IoT architecture  \nunderstand the following scenario when generting:\n imagine you re a hirer an you have 1000s or cover letters to go trough. as a hirer you are renting a person for the job. the job might requre you hire 2 person, but you only have money to hire 1 person. so you have to hire that 1 person carefully. now let me explain the gravity of hiring a person. when you hire someone, you are renting someone with a huge payout. which mean its a avery expensive buy. secondly, when you hire someone, you expect all your problems to go away. or share the current stress or load of the project to someone therefore decreasing the pressure on you. depending on how good the hire is, the pressure on the hirer becomes lesser. like its inversly proportional. the more good the hire, the less pressure on the hirer. now hes not only looking for a jack and master of all trades but also someone who wouldnt let him down, someone who is relaiable , independant, creates trustablke producs where he can rest the reputation of the company with. and also a person who would do all that on time. also note taht the hirer will have to got trough 1000s of cover letters with work experience experience and i have no work experience other that this portfolio project which did allow me to learn in depth about everything and explore my own path in depth also by studying my favourite subject which is embedded sytems in more depth than a person with work experience in similar field, but more hirers arent privy tothat information cuz it is the social convention when it comes to hiring. with this new information in mind and empasising the informations from my previous prompts, create a cover letter that as a hirer with 1000+ cover letters in hand will stand out to you. remember. this is for embedded enginerr or robotic engineering jobs\n\nadditional context:\nim new to the workforce but i am very good with computers especially algorithms, and embedded system programming like arduinos and microcontrollers. im also into electrnics and steppers and sendors. im also good at creating full systems including networking, databases, and full stack dev in angular and spring boot java servlet etc. i can code in a lot of languages too.  the only issue is i have no work experience as i just graduated and did not do any internships. but i am way better than any of the grads currently graduating. with a deeper understanding from the very base level to the point i have designed basic processors using and digital gates in logisim and have a solid and deep understanding of the stuff i know so far. but i have trouble putting all of these into words. oh an ive also have made a functioning robotic system with build in menus and wifi and iot and 3 axis arms and different types of sensor and led arrays and many contingencies and fialsafes to the point my robot can run even if 50 percent of the supporting modules fail. all my code is written from scratch with failsafes in mind and and all algorithms and communication protocols are designed by me alone. but its hard to write all that in a paper with perfect grammar and with the right tonne. \n\n- **Key Achievements:**  \n  - **Arduino Driver (C++):**  \n    - Developed a fault-tolerant driver with custom memory management, interrupt-driven routines, and precise motor control for a 3-axis dispensing mechanism.  \n    - Integrated peripherals: MAX7219-controlled RGB LEDs, SN74S151 multiplexers for box detection, custom LCD menu system, and stepper motor control (DRV8825, A4988).  \n    - Implemented custom communication protocols with error correction, collision detection, timeout, and retry mechanisms for reliable data exchange with the ESP32 server.  \n  - **ESP32 Server (C++):**  \n    - Engineered a robust server capable of both online and offline operation, featuring custom data storage on an SD card and an OLED display for debugging.  \n    - Developed communication protocols to manage data exchange between the Arduino driver and backend servers.  \n  - **Backend (Spring Boot & Java Servlets):**  \n    - Designed RESTful APIs for seamless data flow between the frontend and database.  \n    - Implemented custom logging algorithms and optimized database performance for medication schedules, user profiles, and device status.  \n  - **Frontend (Angular):**  \n    - Built an intuitive user interface for remote device control, medication schedule management, and real-time monitoring.  \n    - Implemented data binding and asynchronous communication with backend APIs.  \n  - **Hardware Design:**  \n    - Designed and built a custom power supply for the entire system.  \n    - Integrated homing sensors, limit switches, and locking mechanisms for precise and reliable operation.  \n- **Technologies Used:** Arduino, ESP32, C++, FreeRTOS, Spring Boot, Java Servlets, SQL, Angular, custom communication protocols, motor control, sensor integration.  \n\n#### **Heletron: Scalable IoT System for Aged Care**  \n**Role:** System Designer, Programmer  \n- Developed a scalable IoT platform for integrating multiple robotic systems tailored to aged care patients.  \n- Created a **Pill Dispenser** with stepper motors, interaction sensors, and bio-sensors for autonomous medication delivery.  \n- Designed algorithms, communication protocols, and fail-safes to ensure system reliability even with 50% module failure.  \n- Built a **Spring Boot** central server and **Angular** dashboard for system management and monitoring.  \n- Managed data flow using **MySQL** for seamless communication between the main server, Heletron, and embedded systems.  \n\n#### **3-Axis Robotic Arm with IoT Capabilities**  \n**Role:** Lead Developer, Engineer  \n- Designed and constructed a 3-axis robotic arm with integrated sensors, Wi-Fi connectivity, and an interactive menu interface.  \n- Programmed in **C++** for precise motor control and developed communication protocols for data transfer to the central server.  \n- Built redundancy into the system, ensuring functionality even during module failures.  \n\n#### **Personal Digital Circuit Design**  \n**Role:** Lead Developer  \n- Designed basic processors using digital gates in **Logisim**, showcasing deep understanding of processor architecture and logic design.  \n- Implemented scheduling and timing protocols for single and multicore processors, optimizing communication and performance.  \n\n### **Professional Summary**  \nHighly skilled and innovative engineer with expertise in **embedded systems**, **IoT solutions**, and **full-stack development**. Proven ability to design, implement, and deploy complex systems integrating hardware, software, and cloud technologies. Passionate about solving real-world problems through cutting-edge robotics, automation, and scalable IoT platforms. Seeking to leverage technical expertise to contribute to impactful projects in embedded systems and IoT.\n\n**Skills:**\n\n*   **Programming Languages:** C++, Java (including Java 22), JavaScript, TypeScript\n*   **Embedded Systems:** Arduino, ESP32, FreeRTOS principles, custom memory management, motor control, sensor integration, hardware debugging\n*   **Backend Development:** Spring Boot, Java Servlets, REST APIs, SQL (MySQL, PostgreSQL), database design, logging frameworks\n*   **Frontend Development:** Angular, TypeScript, HTML, CSS, UI/UX design, responsive design\n*   **Communication Protocols:** Serial communication (UART, SPI, I2C), custom communication protocols with error correction, collision detection, and retry mechanisms\n*   **Tools:** Git, [Other relevant tools like IDEs, debuggers, build systems, etc.]\n*   **Operating Systems:** [List OS experience, e.g., Windows, Linux, RTOS]\n*   **Hardware:** [List hardware experience, e.g., Microcontrollers, sensors, actuators, power supplies]\n\n**Projects:**\n\n*   **Medication Management System**\n    *   Developed a comprehensive, full-stack IoT solution for remote medication dispensing, integrating an Arduino-based driver, ESP32 server, Spring Boot/Java Servlet backends, an SQL database, and an Angular front end.\n    *   **Arduino Driver (C++):**\n        *   Engineered a robust and fault-tolerant driver for precise medication dispensing, utilizing custom memory management techniques and interrupt-driven routines for optimal performance.\n        *   Implemented a custom communication protocol with error correction, collision detection, timeout, and retry mechanisms, ensuring reliable data exchange with the ESP32 server.\n        *   Integrated peripherals including: MAX7219-controlled RGB LEDs for status indication, SN74S151 multiplexers for box detection, a custom LCD menu system, and a 3-axis stepper motor control system for precise dispensing.\n        *   Employed advanced C++ features to optimize code size and execution speed, demonstrating a deep understanding of the language and its limitations.\n    *   **ESP32 Server (C++):**\n        *   Developed a versatile server capable of both online and offline operation, featuring custom data storage on an SD card and an OLED display for debugging.\n        *   Implemented communication protocols to manage data exchange with the Arduino driver and backend servers.\n    *   **Backend (Spring Boot & Java Servlets):**\n        *   Designed and implemented RESTful APIs using both Spring Boot (Java 22) and Java Servlets, demonstrating versatility in server-side technologies.\n        *   Managed data persistence using an SQL database, optimizing data integrity and system performance.\n        *   Implemented custom logging algorithms for comprehensive system monitoring and debugging.\n    *   **Frontend (Angular):**\n        *   Developed an intuitive Angular user interface for remote device control, medication schedule management, and real-time monitoring of device status.\n        *   Implemented data binding and asynchronous communication with the backend APIs.\n    *   **Key Technologies:** Arduino, ESP32, C++, FreeRTOS principles, Spring Boot, Java Servlets, REST APIs, SQL, Angular, custom communication protocols, motor control, sensor integration.\n\n\nSubsystem Breakdown: The description is now organized by subsystem (Arduino Driver, ESP32 Server, Backend, Frontend) to highlight the specific contributions and technologies used in each area.\nTechnical Depth: The descriptions include more technical details, such as the use of custom memory management, interrupt-driven routines, specific communication protocols, and hardware components.\nC++ Emphasis: The description explicitly mentions the use of advanced C++ features and the optimization of code for memory efficiency and real-time performance.\nTechnology List: A list of key technologies is included at the end to provide a quick overview of your skillset.\nClear Language: The language is more concise and action-oriented, focusing on what you did and achieved.\nFreeRTOS Principles: Explicitly mentions the use of FreeRTOS principles in the communication handler.\nJava Version: Specifies the Java version used in the Spring Boot backend.\nThis revised description should effectively showcase your technical skills and expertise to potential employers. Remember to tailor it further to match the specific requirements of the jobs you're applying for.\n\n\n    *   **Arduino Driver (C++):**\n        *   Engineered a robust and fault-tolerant driver for precise medication dispensing, utilizing custom memory management techniques and interrupt-driven routines for optimal performance.\n        *   Implemented a custom communication protocol with error correction, collision detection, timeout, and retry mechanisms, ensuring reliable data exchange with the ESP32 server.\n        *   Integrated peripherals including: MAX7219-controlled RGB LEDs for status indication, SN74S151 multiplexers for box detection, a custom LCD menu system, and a 3-axis stepper motor control system for precise dispensing.\n        *   Employed advanced C++ features to optimize code size and execution speed, demonstrating a deep understanding of the language and its limitations.\n    *   **ESP32 Server (C++):**\n        *   Developed a versatile server capable of both online and offline operation, featuring custom data storage on an SD card and an OLED display for debugging.\n        *   Implemented communication protocols to manage data exchange with the Arduino driver and backend servers.\n    *   **Backend (Spring Boot & Java Servlets):**\n        *   Designed and implemented RESTful APIs using both Spring Boot (Java 22) and Java Servlets, demonstrating versatility in server-side technologies.\n        *   Managed data persistence using an SQL database, optimizing data integrity and system performance.\n        *   Implemented custom logging algorithms for comprehensive system monitoring and debugging.\n    *   **Frontend (Angular):**\n        *   Developed an intuitive Angular user interface for remote device control, medication schedule management, and real-time monitoring of device status.\n        *   Implemented data binding and asynchronous communication with the backend APIs.\n\n \n**Medication Management System**\n\n*   Designed and implemented a comprehensive medication management system, encompassing:\n    *   **Arduino Driver:** A fault-tolerant driver with custom communication, motor control, and memory management.\n    *   **ESP32 Server:** A robust server with online/offline capabilities and custom data storage.\n    *   **Backend:** Spring Boot and Java Servlet-based REST APIs with custom logging.\n    *   **Database:** An SQL database for medication schedules and user data.\n    *   **Frontend:** An Angular user interface for remote control and monitoring.\n*   Key achievements include:\n    *   Developing a custom communication protocol with error correction and collision detection.\n    *   Implementing a 3-axis dispensing mechanism with precise motor control.\n    *   Optimizing code for memory efficiency and real-time performance.\n    *   Designing a custom power supply for the entire system.\n\n\n\n\n\n===============OPTION 3 Focus on TEcnical skills===================\n\n**Medication Management System**\n\n*   Developed a full-stack medication management system, showcasing expertise in:\n    *   **Embedded Systems:** Arduino, ESP32, FreeRTOS principles, custom memory management, motor control, sensor integration.\n    *   **Communication Protocols:** Custom serial communication with error correction, collision detection, and retry mechanisms.\n    *   **Backend Development:** Spring Boot, Java Servlets, REST APIs, SQL database design, custom logging.\n    *   **Frontend Development:** Angular, UI design, data visualization.\n    *   **Hardware Design:** Custom power supply design, circuit design, component selection.\n\n\n\n\n",
    "system_template": "\nYou are a professional cover letter assistant. \nYou help create tailored cover letters based on job descriptions.\n\nWhen writing cover letters, you should:\n1. Create professionally formatted cover letters\n2. Highlight relevant skills and experience that match job requirements\n3. do not include [enter stuff here] things on the coverletter like [enter your favourite experience here] or [Platform where you saw the advertisement] or [your name here]. the letter should be ready to send to the recruters. all the information you need is included.\n4. do not include my lack of experience. but do not say i have experience either!. i.e do not lie, just omit\n5. Make the letter approximately 250-400 words\n6. do not include experience or technologies i have not included in my personal profile or resume\n\n\n\n\n\n\n\n\n",
    "resume_path": "C:/Users/user/Documents/Docs/Job Stuff/Resume V2.1.pdf"
}